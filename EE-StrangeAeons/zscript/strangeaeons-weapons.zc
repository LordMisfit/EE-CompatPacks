class ScepterOfSoulsUses : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}
class ScepterOfSouls : DinahWeapon
{
	int sceptenergy;
	int sceptenergymax;
	int sceptenergycost;
	default
	{
		//$Category Weapons;
		Inventory.PickupMessage "You got the \cjScepter of Souls\c-! \cx[Slot 0]\c-";
		Inventory.PickupSound "Misc/W_PkUp";
		Obituary "%k sucked out %o's soul";
		Tag "Scepter of Souls";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.SelectionOrder 2400;
		Weapon.Slotnumber 0;
		Weapon.SlotPriority 2;
		Weapon.KickBack 0;
		AttackSound "Weapons/SoulScepter/Hit";
	}
	States
	{
		Spawn:
			SLSP A 1
			{
				if (CountInv("ScepterOfSouls",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("DualScepterOfSouls");
					A_FadeOut(1,1);
				}
			}
			Loop;
		Ready:
			SLSP B 0 Bright A_StopSound(CHAN_7);
			SLSP BBBBB 1 A_WeaponReady();
			SLSP CCCCC 1 A_WeaponReady();
			SLSP DDDDD 1 A_WeaponReady();
			SLSP EEEEE 1 A_WeaponReady();
			Loop;
		Deselect:
			SLSP B 0 A_StopSound(CHAN_7);
			SLSP B 1
			{
				A_Lower(12);
			}
			Loop;
		Select:
			SLSP B 1
			{
				A_Raise(12);
			}
			Loop;

		Fire:
			SLSP F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 5;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLSP F 4 Bright
			{
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		Hold:
			SLSP G 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPuff", 128);
			}
			SLSP H 2 Bright
			{
			}
			SLSP I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPuff", 128);
			}
			SLSP J 2 Bright
			{
			}
			SLSP K 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;

					invoker.sceptenergycost = 5;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Hold");
						}
						else
						{
							invoker.sceptenergy = 0;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP L 0 Bright A_StopSound(CHAN_7);
			SLSP L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLSP LM 4 Bright
			{
			}
			Goto Ready;

		AltFire:
			SLSP F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;

					invoker.sceptenergycost = 12;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLSP F 4 Bright
			{
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		AltHold:
			SLSP G 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPowerPuff", 128);
			}
			SLSP H 2 Bright
			{
			}
			SLSP I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPowerPuff", 128);
			}
			SLSP J 2 Bright
			{
			}
			SLSP K 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPowerPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;

					invoker.sceptenergycost = 12;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("AltHold");
						}
						else
						{
							invoker.sceptenergy = 0;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP L 0 Bright A_StopSound(CHAN_7);
			SLSP L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLSP LM 4 Bright
			{
			}
			Goto Ready;
	}
}

class DualScepterOfSoulsUses : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}

class DualScepterOfSouls : ScepterOfSouls
{
	default
	{
		//$Category Weapons;
		Inventory.PickupMessage "You got a second \cjScepter of Souls\c-! \cx[Slot 0]\c-";
		Inventory.PickupSound "Misc/W_PkUp";
		Obituary "%k sucked out %o's soul";
		Tag "Dual Scepters of Souls";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.SelectionOrder 2400;
		Weapon.Slotnumber 0;
		Weapon.SlotPriority 2;
		//Weapon.SisterWeapon "ScepterOfSouls~Powered";
		Weapon.KickBack 0;
		AttackSound "Weapons/SoulScepter/Hit";
	}
	
	States
	{
		Spawn:
			SLSP A 1
			{
				if (CountInv("DualScepterOfSouls",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("YithGunReplacer");
					A_FadeOut(1,1);
				}
			}
			Loop;
		Ready:
			SLS2 B 0 Bright A_StopSound(CHAN_7);
			SLS2 BBBBB 1 A_WeaponReady();
			SLS2 CCCCC 1 A_WeaponReady();
			SLS2 DDDDD 1 A_WeaponReady();
			SLS2 EEEEE 1 A_WeaponReady();
			Loop;
		Deselect:
			SLS2 B 0 A_StopSound(CHAN_7);
			SLS2 B 1
			{
				A_Lower(12);
			}
			Loop;
		Select:
			SLS2 B 1
			{
				A_Raise(12);
			}
			Loop;

		Fire:
			SLS2 F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 10;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLS2 F 4 Bright
			{
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		Hold:
			SLS2 G 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
			}
			SLS2 H 2 Bright
			{
			}
			SLS2 I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
			}
			SLS2 J 2 Bright
			{
			}
			SLS2 K 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 10;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Hold");
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 L 0 Bright A_StopSound(CHAN_7);
			SLS2 L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLS2 LM 4 Bright
			{
			}
			Goto Ready;

		AltFire:
			SLS2 F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 25;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLS2 F 4 Bright
			{
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		AltHold:
			SLS2 G 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
			}
			SLS2 H 2 Bright
			{
			}
			SLS2 I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
			}
			SLS2 J 2 Bright
			{
			}
			SLS2 K 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 25;
					if (!CountInv("PowerInfiniteAmmo")) invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("AltHold");
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 L 0 Bright A_StopSound(CHAN_7);
			SLS2 L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLS2 LM 4 Bright
			{
			}
			Goto Ready;
	}
}

class ImpalerBowZoom : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}
class ImpalerBowFakeReady : PlaceholderItem { } // Checks to see if your current selected weapon is "Hellcore Class" [for HUD displays]
class ImpalerBowRealReady : PlaceholderItem { } // Checks to see if your current selected weapon is "Hellcore Class" [for HUD displays]
class ImpalerXBow : DinahWeapon replaces Chainsaw
{
	int bowenergy;
	int bowenergybits;
	int bowenergycost;
	default
	{
		Inventory.PickupMessage "You got the \cjImpaler\c-! \cx[Slot 5]\c-";
		Tag "Impaler Crossbow";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.UpSound "Weapon/XBowLoad";
		Weapon.KickBack 20;
		Weapon.SelectionOrder 2500;
		Weapon.Slotnumber 5;
		+WEAPON.NOALERT;
	}
	
	States
	{
		Spawn:
			CBOW Z 0
			{
				if (CountInv("ImpalerXBow",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("DualImpalerXBow");
					A_FadeOut(1,1);
				}
			}
			CBOW Z 1;
			loop;
		Select:
			CBOW E 1
			{
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }

				A_Raise(12);
			}
			Loop;
		Deselect:
			CBOW E 1
			{
				A_ZoomFactor(1.0,ZOOM_INSTANT);

				A_Lower(12);
			}
			Loop;
		Ready:
			CBOW E 0 A_JumpIfNoAmmo("FakeReady");
			CBOW EF 5
			{
			}
		RealReady:
			CBOW A 1
			{
				A_SetInventory("ImpalerBowRealReady",1);
				A_SetInventory("ImpalerBowFakeReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		FakeReady:
			CBOW E 1 
			{
				A_SetInventory("ImpalerBowFakeReady",1);
				A_SetInventory("ImpalerBowRealReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Fire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 25;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			CBOW B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_FireProjectile("SonicNail",0);
				
				if (MiscItem)
				{
					if (!CountInv("PowerInfiniteAmmo")) invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(1.75);
			}
			CBOW C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			CBOW D 5
			{
			}
			CBOW E 5 
			{
				A_CheckReload();
			}
			CBOW F 5
			{
			}
			CBOW A 12
			{
			}
			Goto RealReady;

		AltFire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 125;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			CBOW B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_FireProjectile("SonicNail",2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",-5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				
				if (MiscItem)
				{
					if (!CountInv("PowerInfiniteAmmo")) invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(4.375);
			}
			CBOW C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			CBOW D 5
			{
			}
			CBOW E 5 
			{
				A_CheckReload();
			}
			CBOW F 5
			{
			}
			CBOW A 12
			{
			}
			Goto RealReady;

		// Zoom :V
		User4:
			CBOW A 0
			{
				if (CountInv("ImpalerBowFakeReady")) { return resolvestate("User4Fake"); }
				else if (CountInv("ImpalerBowRealReady")) { return resolvestate("User4Real"); }
				return resolvestate("Ready");
			}
		User4Fake:
			CBOW E 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto FakeReady;
		User4Real:
			CBOW A 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto RealReady;
	}
}

class DualImpalerXBow : ImpalerXBow
{
	default
	{
		Inventory.PickupMessage "You got a second \cjImpaler\c-! \cx[Slot 5]\c-";
		Tag "Dual Impaler Crossbows";
		Weapon.UpSound "Weapon/XBowLoad";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.KickBack 20;
		Weapon.SelectionOrder 2500;
		Weapon.Slotnumber 5;
		+WEAPON.NOALERT;
	}
	
	States
	{
		Spawn:
			CBOW Z 0
			{
				if (CountInv("DualImpalerXBow",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("PikeAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("PikeAmmo",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
					A_FadeOut(1,1);
				}
			}
			CBOW Z 1;
			loop;
		Select:
			DCRB E 1
			{
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }

				A_Raise(12);
			}
			Loop;
		Deselect:
			DCRB E 1
			{
				A_ZoomFactor(1.0,ZOOM_INSTANT);

				A_Lower(12);
			}
			Loop;
		Ready:
			DCRB E 0 A_JumpIfNoAmmo("FakeReady");
			DCRB EF 5
			{
			}
		RealReady:
			DCRB A 1
			{
				A_SetInventory("ImpalerBowRealReady",1);
				A_SetInventory("ImpalerBowFakeReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		FakeReady:
			DCRB E 1 
			{
				A_SetInventory("ImpalerBowFakeReady",1);
				A_SetInventory("ImpalerBowRealReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Fire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 50;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			DCRB B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_SetAngle(angle-1.0);
				A_FireProjectile("SonicNail",0);
				A_SetAngle(angle+2.0);
				A_FireProjectile("SonicNail",0);
				A_SetAngle(angle-1.0);
				
				if (MiscItem)
				{
					if (!CountInv("PowerInfiniteAmmo")) invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(1.75);
			}
			DCRB C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			DCRB D 5
			{
			}
			DCRB E 5 
			{
				A_CheckReload();
			}
			DCRB F 5
			{
			}
			DCRB A 12
			{
			}
			Goto RealReady;

		AltFire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 250;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			DCRB B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_SetAngle(angle-1.0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_FireProjectile("SonicNail",2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",-5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_SetAngle(angle+2.0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_FireProjectile("SonicNail",2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",-5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_SetAngle(angle-1.0);
				
				if (MiscItem)
				{
					if (!CountInv("PowerInfiniteAmmo")) invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(4.375);
			}
			DCRB C 8 
			{

				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
				A_StartSound("Weapon/XBowLoad", CHAN_BODY);
			}
			DCRB D 5
			{
			}
			DCRB E 5 
			{
				A_CheckReload();
			}
			DCRB F 5
			{
			}
			DCRB A 12
			{
			}
			Goto RealReady;

		// Zoom :V
		User4:
			DCRB A 0
			{
				if (CountInv("ImpalerBowFakeReady")) { return resolvestate("User4Fake"); }
				else if (CountInv("ImpalerBowRealReady")) { return resolvestate("User4Real"); }
				return resolvestate("Ready");
			}
		User4Fake:
			DCRB E 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto FakeReady;
		User4Real:
			DCRB A 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto RealReady;
	}
}

class SonicNail : SingleDamageFastRipper
{
	default
	{
		Tag "Impaler Bolt";
		DamageFunction (16 + random(-8,8));
		Scale 0.7;
		Speed 150; // 75
		radius 2;
		height 4;
		Seesound "Weapon/XBowFire";
		deathsound "Nailhit";
		Decal "RailScorchLower";
		DamageType "Zap";
		Missiletype "";
		+NOPAIN;
		+RIPPER;
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				bNOPAIN = random(1,frandom(0.25,2.0)); //otherwise the ripping would make it very OP 
			} 
		SpawnLoop:
			BLAD AAAAAABBBBBB 1 Bright
			{
				A_SpawnItemEX("SonicNailSmoke");
			}
			loop;
		Death:
			TNT1 A 0 
			{
				A_SpawnItemEX("NailSpark");
				A_Explode((16 + random(-8,8)),32,0,0,16);
			}
			SPLS CDEFGHI 2 Bright A_SetTranslucent(0.85,1);
			stop;
	}
}

class SonicNailSmoke : MageWandSmoke
{
	default
	{
		Alpha 0.5;
		Scale 0.25;
	}
	
	States
	{
		Spawn:
			SNIC BCDEF 2 A_Fadeout(0.016);
			Stop;
	}
}

class NailSpark : MageWandSmoke
{
	default
	{
		Scale 0.7;
	}
	
	States
	{
		Spawn:
			FX57 ABCDEFGHIJ 2 bright A_SetTranslucent(0.85,1);
			Stop;
	}
}

class SoulScepterPuff : EEPuff
{
	default
	{
		Tag "Soul Scepter";
		Radius 3;
		Height 3;
		+NoClip;
		+AlwaysPuff;
		+PuffOnActors;
		+NoGravity;
		+BloodlessImpact;
		-BloodSplatter;
		+DontSplash;
		DamageType "Eldritch";
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			SSPF ABCD 3 Bright;
			Stop;
	}
}

class DualSoulScepterPuff : EEPuff
{
	default
	{
		Tag "Soul Scepter";
		Radius 3;
		Height 3;
		+NoClip;
		+AlwaysPuff;
		+PuffOnActors;
		+NoGravity;
		+BloodlessImpact;
		-BloodSplatter;
		+DontSplash;
		DamageType "Eldritch";
	}
	
	States
	{
		Spawn:
		Melee:
		Crash:
			SSPF ABCD 3 Bright;
			Stop;
	}
}

class SoulScepterPuff2 : EEPuff
{
	default
	{
		Tag "Soul Scepter";
		Radius 1;
		Height 1;
		+NoInteraction;
		DamageType "Eldritch";
	}
	
	States
	{
		Spawn:
			SSPF A 0 Bright;
			SSPF A 0 Bright ThrustThingZ(0, Random(2, 6), 0, 0);
			SSPF ABCD 3 Bright;
			Stop;
	}
}

class SoulScepterPowerPuff : EEPuff
{
	default
	{
		Tag "Soul Scepter";
		Radius 3;
		Height 3;
		+NoClip;
		+AlwaysPuff;
		+PuffOnActors;
		+NoGravity;
		+BloodlessImpact;
		-BloodSplatter;
		+DontSplash;
		+PuffGetsOwner;
		DamageType "Eldritch";
	}
	
	States
	{
		Spawn:
		Crash:
		Melee:
			TNT1 A 0;
			TNT1 AAAA 0 A_SpawnItemEx("SoulScepterPuff2", Random(0, 32), 0, 0, 0, 0, 0, Random(0, 360), 128);
			TNT1 A 1 A_Explode((3 * random(1,3)), 32, 0, 0, 24);
			Stop;
	}
}

class DualSoulScepterPowerPuff : EEPuff
{
	default
	{
		Tag "Soul Scepter";
		Radius 3;
		Height 3;
		+NoClip;
		+AlwaysPuff;
		+PuffOnActors;
		+NoGravity;
		+BloodlessImpact;
		-BloodSplatter;
		+DontSplash;
		+PuffGetsOwner;
		DamageType "Eldritch";
	}
	
	States
	{
		Spawn:
		Crash:
		Melee:
			TNT1 A 0;
			TNT1 AAAA 0 A_SpawnItemEx("SoulScepterPuff2", Random(0, 32), 0, 0, 0, 0, 0, Random(0, 360), 128);
			TNT1 A 1 A_Explode((3 * random(1,3)), 32, 0, 0, 24);
			Stop;
	}
}

class SoulScepterHealthBonus : Health
{
	default
	{
		-CountItem;
		+Inventory.AutoActivate;
		Inventory.Amount 1;
		Inventory.MaxAmount 100;
		Inventory.PickupMessage "";
		Inventory.PickupSound "";
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
	}
}

class SoulFragment : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		DamageFunction (0);
		Projectile;
		+DontSplash;
		+NoClip;
		RenderStyle "Add";
		Alpha 0.15;
		Scale 0.7;
	}
	
	States
	{
		Spawn:
			SSPS AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 Bright A_SpawnItemEx("SoulFragmentTrail", 0, Random(-1, 1), Random(1, -1), 0, 0, 0, 0, 128);
		FadeOut:
			SSPS A 1 A_SpawnItemEx("SoulFragmentTrail", 0, Random(-1, 1), Random(1, -1), 0, 0, 0, 0, 128);
			SSPS A 0 A_FadeOut(0.02);
			Loop;
		Death:
			TNT1 A 1;
			Stop;
	}
}

class SoulFragmentTrail : EEBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		DamageFunction (0);
		Projectile;
		+DontSplash;
		+NoClip;
		RenderStyle "Add";
		Alpha 0.15;
		Scale 0.7;
	}
	
	States
	{
		Spawn:
			SSPS BCD 3 Bright;
			Stop;
	}
}

class AK47 : DinahWeapon replaces Chaingun
{
	default
	{
		obituary "%o was perforated by %k's AK47.";
		attacksound "Weapons/AK47FIR";
		inventory.pickupmessage "You got the AK47 assault rifle!";
		weapon.selectionorder 700;
		Weapon.SlotNumber 4;
		weapon.kickback 100;
		weapon.ammotype "Clip";
		weapon.ammouse 1;
		weapon.ammogive 20;
		Decal "BulletChip";
	}
	
	States
	{
		Ready:
			AK47 A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			AK47 A 1 A_Lower(12);
			Loop;
		Select:
			AK47 A 1 A_Raise(12);
			Loop;
		Fire:
			AK4F A 1 bright A_FireBullets(2,2.5,1,5,"BulletPuff");
			AK47 B 2 Radius_Quake(1,2,0,1,0);
			AK47 B 0 A_ReFire();
			Goto Ready;
		Flash:
			TNT1 A 2 bright;
			Stop;
		Spawn:
			AK4I A -1;
			Stop;
	}
}

class YithGun : DinahWeapon replaces PlasmaRifle
{
	default
	{
		Weapon.SelectionOrder 90;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 40;
		Weapon.AmmoType "Cell";
		Weapon.SlotNumber 6;
		Inventory.PickupMessage "You got a Yithian Lightning Gun!";
	}
	
	States
	{
		Ready:
			ETRG A 1 A_WeaponReady(WRF_ALLOWUSER4);
			Loop;
		Deselect:
			ETRG A 1 A_Lower(12);
			Loop;
		Select:
			ETRG A 1 A_Raise(12);
			Loop;
		Fire:
			ETRG B 0 A_StartSound("electrogun/charge",CHAN_WEAPON);
			ETRG A 2 A_GunFlash(); 
			ETRF A 2 A_FireProjectile("ElectroBlast");
			ETRG B 20 A_ReFire();
			Goto Ready;
		Flash:
			ETRF A 2 Bright A_Light1();
			ETRF B 2 Bright A_Light1();
			Goto LightDone;
		Spawn:
			ETRO A -1;
			Stop;
	}
}

class ElectroBlast : EEFastProjectile
{
	default
	{
		Tag "Electro Blast";
		Radius 13;
		Height 8;
		Speed 100;
		Damage 5;
		Projectile;
		DamageType "Disintegrate";
		Scale 0.75;
		+RANDOMIZE;
		+BLOODLESSIMPACT;
		RenderStyle "Add";
		Alpha 0.75;
		SeeSound "electrogun/shoot";
		DeathSound "electrogun/hit";
		Obituary "%o was shocked by %k's yithian lightning gun.";
	}
	
	States
	{
		Spawn:
			EBLT GH 0 bright A_SpawnItem("ElectroBlastTrail");
			EBLT GH 2 bright;
			loop;
		Death:
			EBLT IJK 3 bright;
			stop;
	}
}

class ElectroBlastTrail : EEProjectile
{
	default
	{
		Radius 13;
		Height 8;
		Speed 20;
		Damage 1;
		Projectile;
		+RANDOMIZE;
		RenderStyle "Add";
		Alpha 0.75;
	}
	
	States
	{
		Spawn:
			EBLT ABC 3 bright A_BishopMissileWeave();
			goto Death;
		Death:
			EBLT DEF 4 bright A_FadeOut(0.5);
			loop;
	}
}

class AK47Checker : CustomInventoryExt replaces AK47
{
	//$Sprite "MGUNA0"
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				A_SpawnItemEx("CandleWhip",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
				A_SpawnItemEx("CandleWhip",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,128);
				A_SpawnItemEx("CandleWhip",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,64);
				A_SpawnItemEx("CandleWhip",frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),frandom(-2,2),0,SXF_NOCHECKPOSITION,32);
				A_FadeOut(1.0);
			}
		Idle:
			TNT1 A 1;
			stop;
	}
}

class YithGunReplacer : RandomSpawner2 replaces Yithgun
{
	default
	{
		DropItem "ScepterofSouls", 256, 4;
		DropItem "SuperVac", 256, 4;
		DropItem "EvilWarriorShield", 256, 4;
		DropItem "Grimophone", 256, 4;
	}
}
