class ScepterOfSoulsUses : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}
class ScepterOfSouls : DinahWeapon
{
	int sceptenergy;
	int sceptenergymax;
	int sceptenergycost;
	default
	{
		//$Category Weapons;
		Inventory.PickupMessage "You got the \cjScepter of Souls\c-! \cx[Slot 0]\c-";
		Inventory.PickupSound "Misc/W_PkUp";
		Obituary "%k sucked out %o's soul";
		Tag "Scepter of Souls";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.SelectionOrder 2400;
		Weapon.Slotnumber 0;
		Weapon.SlotPriority 2;
		Weapon.KickBack 0;
		AttackSound "Weapons/SoulScepter/Hit";
	}
	States
	{
		Spawn:
			SLSP A 1
			{
				if (CountInv("ScepterOfSouls",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("DualScepterOfSouls");
					A_FadeOut(1,1);
				}
			}
			Loop;
		Ready:
			SLSP B 0 Bright A_StopSound(CHAN_7);
			SLSP BBBBB 1 A_WeaponReady();
			SLSP CCCCC 1 A_WeaponReady();
			SLSP DDDDD 1 A_WeaponReady();
			SLSP EEEEE 1 A_WeaponReady();
			Loop;
		Deselect:
			SLSP B 0 A_StopSound(CHAN_7);
			SLSP B 1
			{
				A_Lower(12);
			}
			Loop;
		Select:
			SLSP B 1
			{
				A_Raise(12);
			}
			Loop;

		Fire:
			SLSP F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 5;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLSP F 4 Bright
			{
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		Hold:
			SLSP G 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPuff", 128);
			}
			SLSP H 2 Bright
			{
			}
			SLSP I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPuff", 128);
			}
			SLSP J 2 Bright
			{
			}
			SLSP K 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;

					invoker.sceptenergycost = 5;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Hold");
						}
						else
						{
							invoker.sceptenergy = 0;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP L 0 Bright A_StopSound(CHAN_7);
			SLSP L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLSP LM 4 Bright
			{
			}
			Goto Ready;

		AltFire:
			SLSP F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;

					invoker.sceptenergycost = 12;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLSP F 4 Bright
			{
			}
			SLSP F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		AltHold:
			SLSP G 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPowerPuff", 128);
			}
			SLSP H 2 Bright
			{
			}
			SLSP I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPowerPuff", 128);
			}
			SLSP J 2 Bright
			{
			}
			SLSP K 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "SoulScepterPowerPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;

					invoker.sceptenergycost = 12;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("AltHold");
						}
						else
						{
							invoker.sceptenergy = 0;
							if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLSP L 0 Bright A_StopSound(CHAN_7);
			SLSP L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLSP LM 4 Bright
			{
			}
			Goto Ready;
	}
}

class DualScepterOfSoulsUses : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}

class DualScepterOfSouls : ScepterOfSouls
{
	default
	{
		//$Category Weapons;
		Inventory.PickupMessage "You got a second \cjScepter of Souls\c-! \cx[Slot 0]\c-";
		Inventory.PickupSound "Misc/W_PkUp";
		Obituary "%k sucked out %o's soul";
		Tag "Dual Scepters of Souls";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.SelectionOrder 2400;
		Weapon.Slotnumber 0;
		Weapon.SlotPriority 2;
		//Weapon.SisterWeapon "ScepterOfSouls~Powered";
		Weapon.KickBack 0;
		AttackSound "Weapons/SoulScepter/Hit";
	}
	
	States
	{
		Spawn:
			SLSP A 1
			{
				if (CountInv("DualScepterOfSouls",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("YithGunReplacer");
					A_FadeOut(1,1);
				}
			}
			Loop;
		Ready:
			SLS2 B 0 Bright A_StopSound(CHAN_7);
			SLS2 BBBBB 1 A_WeaponReady();
			SLS2 CCCCC 1 A_WeaponReady();
			SLS2 DDDDD 1 A_WeaponReady();
			SLS2 EEEEE 1 A_WeaponReady();
			Loop;
		Deselect:
			SLS2 B 0 A_StopSound(CHAN_7);
			SLS2 B 1
			{
				A_Lower(12);
			}
			Loop;
		Select:
			SLS2 B 1
			{
				A_Raise(12);
			}
			Loop;

		Fire:
			SLS2 F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 10;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLS2 F 4 Bright
			{
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		Hold:
			SLS2 G 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
			}
			SLS2 H 2 Bright
			{
			}
			SLS2 I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
			}
			SLS2 J 2 Bright
			{
			}
			SLS2 K 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 10;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Hold");
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 L 0 Bright A_StopSound(CHAN_7);
			SLS2 L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLS2 LM 4 Bright
			{
			}
			Goto Ready;

		AltFire:
			SLS2 F 0 Bright
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 25;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Fire1",CHAN_6);
			SLS2 F 4 Bright
			{
			}
			SLS2 F 0 Bright A_StartSound("Weapons/SoulScepter/Loop",CHAN_7);
		AltHold:
			SLS2 G 2 Bright 
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
			}
			SLS2 H 2 Bright
			{
			}
			SLS2 I 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
			}
			SLS2 J 2 Bright
			{
			}
			SLS2 K 2 Bright
			{
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
				A_CustomPunch((3 * random(1,3)), 1, 1, "DualSoulScepterPowerPuff", 128);
			}
			SLSP K 0 Bright 
			{
				A_ReFire();
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.sceptenergy = MiscItem.Temp2Charge;
					invoker.sceptenergycost = 25;
					invoker.sceptenergy -= invoker.sceptenergycost;
					if (invoker.sceptenergy <= invoker.sceptenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.sceptenergy += MiscItem.Temp2MaxCharge;
							else invoker.sceptenergy += 1000;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("AltHold");
						}
						else
						{
							invoker.sceptenergy = 0;
							MiscItem.Temp2Charge = invoker.sceptenergy;
							return resolvestate("Ready");
						}
						MiscItem.Temp2Charge = invoker.sceptenergy;
						return resolvestate(null);
					}
					MiscItem.Temp2Charge = invoker.sceptenergy;
					return resolvestate(null);
				}
				MiscItem.Temp2Charge = invoker.sceptenergy;
				return resolvestate(null);
			}
			SLS2 L 0 Bright A_StopSound(CHAN_7);
			SLS2 L 0 Bright A_StartSound("Weapons/SoulScepter/Stop",CHAN_6);
			SLS2 LM 4 Bright
			{
			}
			Goto Ready;
	}
}

class ImpalerBowZoom : PlaceholderItem 
{ 
	default
	{
		+INVENTORY.KEEPDEPLETED;
		Inventory.MaxAmount 2147483647;
	}
}
class ImpalerBowFakeReady : PlaceholderItem { } // Checks to see if your current selected weapon is "Hellcore Class" [for HUD displays]
class ImpalerBowRealReady : PlaceholderItem { } // Checks to see if your current selected weapon is "Hellcore Class" [for HUD displays]
class ImpalerXBow : DinahWeapon replaces Chainsaw
{
	int bowenergy;
	int bowenergybits;
	int bowenergycost;
	default
	{
		Inventory.PickupMessage "You got the \cjImpaler\c-! \cx[Slot 5]\c-";
		Tag "Impaler Crossbow";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.UpSound "Weapon/XBowLoad";
		Weapon.KickBack 20;
		Weapon.SelectionOrder 2500;
		Weapon.Slotnumber 5;
		+WEAPON.NOALERT;
	}
	
	States
	{
		Spawn:
			CBOW Z 0
			{
				if (CountInv("ImpalerXBow",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("DualImpalerXBow");
					A_FadeOut(1,1);
				}
			}
			CBOW Z 1;
			loop;
		Select:
			CBOW E 1
			{
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }

				A_Raise(12);
			}
			Loop;
		Deselect:
			CBOW E 1
			{
				A_ZoomFactor(1.0,ZOOM_INSTANT);

				A_Lower(12);
			}
			Loop;
		Ready:
			CBOW E 0 A_JumpIfNoAmmo("FakeReady");
			CBOW EF 5
			{
			}
		RealReady:
			CBOW A 1
			{
				A_SetInventory("ImpalerBowRealReady",1);
				A_SetInventory("ImpalerBowFakeReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		FakeReady:
			CBOW E 1 
			{
				A_SetInventory("ImpalerBowFakeReady",1);
				A_SetInventory("ImpalerBowRealReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Fire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 25;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			CBOW B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_FireProjectile("SonicNail",0);
				
				if (MiscItem)
				{
					invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(1.75);
			}
			CBOW C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			CBOW D 5
			{
			}
			CBOW E 5 
			{
				A_CheckReload();
			}
			CBOW F 5
			{
			}
			CBOW A 12
			{
			}
			Goto RealReady;

		AltFire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 125;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				if (MiscItem) MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			CBOW B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_FireProjectile("SonicNail",2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",-5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				
				if (MiscItem)
				{
					invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(4.375);
			}
			CBOW C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			CBOW D 5
			{
			}
			CBOW E 5 
			{
				A_CheckReload();
			}
			CBOW F 5
			{
			}
			CBOW A 12
			{
			}
			Goto RealReady;

		// Zoom :V
		User4:
			CBOW A 0
			{
				if (CountInv("ImpalerBowFakeReady")) { return resolvestate("User4Fake"); }
				else if (CountInv("ImpalerBowRealReady")) { return resolvestate("User4Real"); }
				return resolvestate("Ready");
			}
		User4Fake:
			CBOW E 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto FakeReady;
		User4Real:
			CBOW A 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto RealReady;
	}
}

class DualImpalerXBow : ImpalerXBow
{
	default
	{
		Inventory.PickupMessage "You got a second \cjImpaler\c-! \cx[Slot 5]\c-";
		Tag "Dual Impaler Crossbows";
		Weapon.UpSound "Weapon/XBowLoad";
		Weapon.AmmoType "PikeAmmo";
		Weapon.AmmoGive 1;
		Weapon.KickBack 20;
		Weapon.SelectionOrder 2500;
		Weapon.Slotnumber 5;
		+WEAPON.NOALERT;
	}
	
	States
	{
		Spawn:
			CBOW Z 0
			{
				if (CountInv("DualImpalerXBow",AAPTR_PLAYER1))
				{
					A_SpawnItemEx("PikeAmmo",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION,0,tid);
					A_SpawnItemEx("PikeAmmo",frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),frandom(-1.0,1.0),0,SXF_NOCHECKPOSITION,206);
					A_FadeOut(1,1);
				}
			}
			CBOW Z 1;
			loop;
		Select:
			DCRB E 1
			{
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }

				A_Raise(12);
			}
			Loop;
		Deselect:
			DCRB E 1
			{
				A_ZoomFactor(1.0,ZOOM_INSTANT);

				A_Lower(12);
			}
			Loop;
		Ready:
			DCRB E 0 A_JumpIfNoAmmo("FakeReady");
			DCRB EF 5
			{
			}
		RealReady:
			DCRB A 1
			{
				A_SetInventory("ImpalerBowRealReady",1);
				A_SetInventory("ImpalerBowFakeReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		FakeReady:
			DCRB E 1 
			{
				A_SetInventory("ImpalerBowFakeReady",1);
				A_SetInventory("ImpalerBowRealReady",0);
				A_WeaponReady(WRF_ALLOWUSER4);
			}
			Loop;
		Fire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 50;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			DCRB B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_SetAngle(angle-1.0);
				A_FireProjectile("SonicNail",0);
				A_SetAngle(angle+2.0);
				A_FireProjectile("SonicNail",0);
				A_SetAngle(angle-1.0);
				
				if (MiscItem)
				{
					invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(1.75);
			}
			DCRB C 8 
			{
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
			}
			DCRB D 5
			{
			}
			DCRB E 5 
			{
				A_CheckReload();
			}
			DCRB F 5
			{
			}
			DCRB A 12
			{
			}
			Goto RealReady;

		AltFire:
			TNT1 A 0
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				if (MiscItem)
				{
					invoker.bowenergy = MiscItem.Temp1Charge;

					//HellWarriorMaxCharge
					invoker.bowenergycost = 250;
					if (invoker.bowenergy <= invoker.bowenergycost)
					{
						if (CountInv("PikeAmmo") > 0)
						{
							A_TakeInventory("PikeAmmo",1);
							if (MiscItem) invoker.bowenergy += MiscItem.Temp1MaxCharge;
							else invoker.bowenergy += 1000;
							MiscItem.Temp1Charge = invoker.bowenergy;
						}
						else
						{
							invoker.bowenergy = 0;
							MiscItem.Temp1Charge = invoker.bowenergy;
							return resolvestate("FakeReady");
						}
						MiscItem.Temp1Charge = invoker.bowenergy;
						return resolvestate(null);
					}
					MiscItem.Temp1Charge = invoker.bowenergy;
					return resolvestate(null);
				}
				MiscItem.Temp1Charge = invoker.bowenergy;
				return resolvestate(null);
			}
			DCRB B 6
			{
				actor player = players[0].mo;
				int buttons = GetPlayerInput(INPUT_BUTTONS);
				let MiscItem = PlayerStatItem(Player.FindInventory("PlayerStatItem"));
				let globalvars = DDGlobalVariables.Get();
				A_SetAngle(angle-1.0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_FireProjectile("SonicNail",2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",-5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_SetAngle(angle+2.0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_FireProjectile("SonicNail",2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,1.25);
				A_FireProjectile("SonicNail",2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",-2.5,0,0,0,0,-1.25);
				A_FireProjectile("SonicNail",5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",-5.0,0,0,0,0,0);
				A_FireProjectile("SonicNail",0,0,0,0,0,0); 
				A_SetAngle(angle-1.0);
				
				if (MiscItem)
				{
					invoker.bowenergy -= invoker.bowenergycost;
					MiscItem.Temp1Charge = invoker.bowenergy;
				}
				
				A_Recoil(4.375);
			}
			DCRB C 8 
			{

				A_StartSound("Weapon/XBowLoad", CHAN_WEAPON);
				A_StartSound("Weapon/XBowLoad", CHAN_BODY);
			}
			DCRB D 5
			{
			}
			DCRB E 5 
			{
				A_CheckReload();
			}
			DCRB F 5
			{
			}
			DCRB A 12
			{
			}
			Goto RealReady;

		// Zoom :V
		User4:
			DCRB A 0
			{
				if (CountInv("ImpalerBowFakeReady")) { return resolvestate("User4Fake"); }
				else if (CountInv("ImpalerBowRealReady")) { return resolvestate("User4Real"); }
				return resolvestate("Ready");
			}
		User4Fake:
			DCRB E 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto FakeReady;
		User4Real:
			DCRB A 5
			{
				A_GiveInventory("ImpalerBowZoom",1);
				if (CountInv("ImpalerBowZoom") == 1) { A_ZoomFactor(1.5); A_Print("1.5x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 2) { A_ZoomFactor(2.0); A_Print("2x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 3) { A_ZoomFactor(4.0); A_Print("4x Zoom"); }
				else if (CountInv("ImpalerBowZoom") == 4) { A_ZoomFactor(1.0); A_SetInventory("ImpalerBowZoom",0); A_Print("No Zoom"); }
			}
			goto RealReady;
	}
}
