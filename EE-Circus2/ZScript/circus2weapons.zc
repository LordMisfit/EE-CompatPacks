// Base Circus 2 Weapon Class
class Circus2Weapon : DinahWeapon
{
	default
	{
		Weapon.Kickback 100;
	}
}

// Weapons
class GutFlingerNew : Circus2Weapon
{
	default
	{
		Weapon.SlotNumber 2;
		Weapon.SlotPriority 2.0;
		Tag "Gut-Flinger: \c[purple]<FIRE>\c- shoots a single explosive gut at foes. \c[purple]<ALT-FIRE>\c- quick-shoots a less accurate burst of guts. Shots can deal self-AOE, so beware!";
		Weapon.SelectionOrder 1150;
		Inventory.Pickupsound "Dinah/GetWeapon";
		DDWeapon.PickupVoice true;
		DDWeapon.PickupSound2 "misc/w_pkup";
		DDWeapon.PickupVoice2 false;
		Weapon.AmmoType "ClownSouls";
		Weapon.AmmoType2 "ClownSouls";
		Weapon.AmmoGive 5;
		Weapon.AmmoUse1 1;
		Weapon.AmmoUse2 1;
		Inventory.Pickupmessage "\c[gold]What in Heaven's name is this weird contraption? I'm getting bad vibes from it... \cx[Slot 2]\c-";
		AttackSound "";
		Scale 1;
	}
	
	States 
	{
		Spawn: 
			CCCC F -1;
			loop;
		Ready: 
			CCCC A 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect: 
			CCCC A 1 
			{
				A_Lower(12);
			}
			loop;
		Select: 
			CCCC A 1 
			{
				A_Raise(12);
			}
			loop;
		Fire:
			CCCC A 1 A_JumpIfNoAmmo("FireNoAmmo");
			CCCC A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(321,0,3,20);
			}
			CCCC B 1
			{
				A_StartSound("GUTFIRE");
				string type = "FlyingGut";
				if (invoker.IPAttackCheck) type = "FlyingGutNoHurt";
				A_FireProjectile(type,0,false,5.0,1,0,0);
				double p1 = frandompick(7.5,7.5,7.5,7.5,15.0);
				double p2 = frandompick(7.5,7.5,7.5,7.5,15.0);
				if (invoker.IPAttackCheck) 
				{
					A_FireProjectile(type,p1,false,5.0,1,0,p2);
					A_FireProjectile(type,p1,false,5.0,1,0,-p2);
					A_FireProjectile(type,-p1,false,5.0,1,0,p2);
					A_FireProjectile(type,-p1,false,5.0,1,0,-p2);
				}

				invoker.A_CheckIPModeOnUse();
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("ClownSouls",1);
			}
			CCCC E 1;
			CCCC EDCB 3;
			Goto Ready;
		FireNoAmmo:
			CCCC E 0;
			Goto Deselect;
		AltFire:
			CCCC A 1
			{
				if (CountInv("ClownSouls") <= 0) return resolvestate("AltFireNoAmmo");
				return resolvestate(null);
			}
			CCCC A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(321,0,3,20);
			}
			CCCC B 1
			{
				string type = "FlyingGut";
				if (invoker.IPAttackCheck) type = "FlyingGutNoHurt";
				A_StartSound("GUTFIRE");
				double rand = frandom(-(A_GetHitScanXSpread(16)),(A_GetHitScanXSpread(16)));
				double rand2 = frandom(-(A_GetHitScanXSpread(16)),(A_GetHitScanXSpread(16)));
				double p1 = frandompick(7.5,7.5,7.5,7.5,15.0) + rand;
				double p2 = frandompick(7.5,7.5,7.5,7.5,15.0) + rand2;
				A_FireProjectile(type,rand,false,5.0,1,0,rand2);
				if (invoker.IPAttackCheck) 
				{
					A_FireProjectile(type,p1,false,5.0,1,0,p2);
					A_FireProjectile(type,p1,false,5.0,1,0,-p2);
					A_FireProjectile(type,-p1,false,5.0,1,0,p2);
					A_FireProjectile(type,-p1,false,5.0,1,0,-p2);
				}
				
				invoker.A_CheckIPModeOnUse();
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("ClownSouls",1);
			}
			CCCC E 1;
			CCCC E 1;
			CCCC D 1;
			CCCC C 1;
			Goto Ready;
		AltFireNoAmmo:
			CCCC E 0;
			Goto Ready;
	}
} 

class ClownGrenadeNew : Circus2Weapon
{
	default
	{
		Weapon.SlotNumber 6;
		Weapon.SlotPriority 2.0;
		Tag "Clownish Grenade: \c[purple]<FIRE>\c- throws a grenade that deals no self-AOE. Will explode on contact with a shootable target.";
		Weapon.SelectionOrder 1400;
		Inventory.Pickupsound "Dinah/GetWeapon";
		DDWeapon.PickupVoice true;
		DDWeapon.PickupSound2 "misc/w_pkup";
		DDWeapon.PickupVoice2 false;
		Weapon.AmmoType "CGrenadeAmmo" ;
		Weapon.AmmoGive 5;
		Weapon.AmmoUse 1;
		Inventory.Pickupmessage "\c[gold]These look like some kind of odd canister grenades... \cx[Slot 6]\c-";
		AttackSound "";
		+FloatBob;
		Scale 0.3;
	}
	States 
	{
		Spawn: 
			CGRD ABCDEFGHIJKL 3;
			loop;
		Ready: 
			GHND ABCDEFFFFFEDCBAA 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect: 
			GHND A 1
			{
				A_Lower(12);
			}
			loop;
		Select: 
			GHND A 1 
			{
				A_Raise(12);
			}
			loop;
		Fire: 
			GHND A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(331,0,3,8);
			}
			GHND I 4
			{
				string type = "CGrenade";
				if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) type = "CGrenadeBerserk";
				if (invoker.IPAttackCheck) 
				{
					type = "CGrenadeSplitter";
					if (CountInv("PowerStrength") || CountInv("PowerStrengthDD")) type = "CGrenadeBerserkSplitter";
				}
				A_FireProjectile(type,0,false,0,1,0,0);
				
				invoker.A_CheckIPModeOnUse();
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("CGrenadeAmmo",1);
			}
			GHND G 4 
			{
			}
			GHND H 10 
			{
			}
			Goto Ready;
	}
}

class GoreBalloonNew : Circus2Weapon
{
	default
	{
		Weapon.SlotNumber 4;
		Weapon.SlotPriority 2.0;
		Tag "Explosive Gore Balloon: \c[purple]<FIRE>\c- releases a bloody red balloon packed with explosive viscera at enemies. The released viscera can deal self-AOE, so beware.";
		Weapon.SelectionOrder 1500;
		Inventory.Pickupsound "Dinah/GetWeapon";
		DDWeapon.PickupVoice true;
		DDWeapon.PickupSound2 "misc/w_pkup";
		DDWeapon.PickupVoice2 false;
		Weapon.AmmoType "GoreBalloons";
		Weapon.AmmoGive 5;
		Weapon.AmmoUse 1;
		Inventory.Pickupmessage "\c[gold]Urgh! These balloons are heavy, almost like... wait... is there flaggin' BLOOD inside of these!? \cx[Slot 4]\c-";
		Obituary "%o wanted %k's balloon.";
		Scale 0.75;
	}
	States 
	{
		Spawn: 
			BLNN J -1;
			loop;
		Ready: 
			BLND ABCD 6 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect: 
			BLND E 1
			{
				A_Lower(12);
			}
			Loop;
		Select: 
			BLND E 1
			{
				A_Raise(12);
			}
			Loop;
		Fire: 
			BLND A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(341,0,6,8);
			}
			BLND A 1 
			{
			}
			BLND F 2
			{
			}
			BLND G 2
			{
			}
			TNT1 A 0
			{
				string type = "GoreBalloon666";
				if (invoker.IPAttackCheck) type = "GoreBalloon666IP";
				double heit = frandom(-1.5,3.0);
				A_FireProjectile(type,0,false,0,heit,0,0);
				if (invoker.IPAttackCheck)
				{
					if (random(1,16) <= 1)
					{
						A_FireProjectile(type,-15,false,5.2,heit,0,0);
						A_FireProjectile(type,-7.5,false,5.2,heit,0,0);
						A_FireProjectile(type,7.5,false,-5.2,heit,0,0);
						A_FireProjectile(type,15,false,-5.2,heit,0,0);
					}
					else
					{
						A_FireProjectile(type,-10,false,8,heit,0,0);
						A_FireProjectile(type,10,false,-8,heit,0,0);
					}
				}
				
				invoker.A_CheckIPModeOnUse();
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("GoreBalloons",1);
			}
			BLND I 6
			{
			}
			BLND I 6
			{
			}
			BLND H 6
			{
			}
			TNT1 A 0;
			Goto Select;
	}
}

class GasRocketLauncherNew : Circus2Weapon
{
	default
	{
		Weapon.SlotNumber 5;
		Weapon.SlotPriority 2.0;
		Tag "Bingo's Gas Rocket Launcher: \c[purple]<FIRE>\c- Launches a rocket that explodes into a expanding spread of psychedelic gas clouds. \c[purple]<ALT-FIRE>\c- allows a more inaccurate quick-fire mode. The clouds of your rockets do NOT deal self-AOE, so\c- \c[green]you can safely move through them.\c-";
		Weapon.SelectionOrder 1050;
		Inventory.Pickupsound "Dinah/GetWeapon";
		DDWeapon.PickupVoice true;
		DDWeapon.PickupSound2 "misc/w_pkup";
		DDWeapon.PickupVoice2 false;
		Weapon.AmmoType "ClownSouls";
		Weapon.AmmoType2 "ClownSouls"; 
		Weapon.AmmoGive 20;
		Weapon.AmmoUse1 5;
		Weapon.AmmoUse2 5;
		Inventory.Pickupmessage "\c[gold]Some kind of garish missile or rocket shooting weapon... \cx[Slot 5]\c-";
		Obituary "%o choked on %k's gas.";
		AttackSound "";
		Scale 0.75;
	}
	
	States 
	{
		Spawn: 
			PRCK V -1;
			loop;
		Ready: 
			PRCK G 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect: 
			PRCK G 1 
			{
				A_Lower(12);
			}
			loop;
		Select: 
			PRCK D 1
			{
				A_Raise(12);
			}
			loop;
		Fire:
			PRCK A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(351,0,6,8);
			}
			PRCK G 0 
			{
				A_FireProjectile("RevRocket2",0,false,4,1,0,0);
				
				invoker.A_CheckIPModeOnUse();
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("ClownSouls",5);
			}
			PRCK W 4;
			PRCK A 4 A_StartSound("RRELOAD");
			PRCK BCDEFG 4;
			Goto Ready;
		AltFire:
			PRCK A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(351,0,6,8);
			}
			PRCK G 0 
			{
				if (CountInv("ClownSouls") <= 4)
				{
					return resolvestate("Ready");
				}
				return resolvestate(null);
			}
			PRCK G 0 
			{
				A_FireProjectile("RevRocket2",frandom(-(A_GetHitScanXSpread(17)),(A_GetHitScanXSpread(17))),5,4,1,0,frandom(-(A_GetHitScanYSpread(17)),(A_GetHitScanYSpread(17))));
				
				invoker.A_CheckIPModeOnUse();
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("ClownSouls",5);
			}
			PRCK W 1;
			PRCK A 1 A_StartSound("RRELOAD");
			PRCK BCDEFG 1;
			Goto Ready;
	}
} 

class PopcornGunNew : Circus2Weapon
{
	default
	{
		Weapon.SlotNumber 7;
		Weapon.SlotPriority 2.0;
		Tag "Popcorn Gun: \c[purple]<FIRE>\c- shoots a volley of weaponized popcorn shrapnel at foes.";
		Weapon.SelectionOrder 100;
		Inventory.Pickupsound "Dinah/GetWeapon";
		DDWeapon.PickupVoice true;
		DDWeapon.PickupSound2 "misc/w_pkup";
		DDWeapon.PickupVoice2 false;
		Weapon.AmmoType "PopcornPiece";
		Weapon.AmmoGive 20;
		Weapon.AmmoUse 1;
		Inventory.Pickupmessage "\c[gold]Does... this thing shoot this popcorn I'm finding as ammo? Better save up then... \cx[Slot 7]\c-";
		Obituary "%o ate some of %k's popcorn.";
		AttackSound "";
		Scale 0.75;
	}
	
	States 
	{
		Spawn: 
			PPPG A -1;
			loop;
		Ready: 
			PGUN AAACCCDDDEEEFFFGGG 1 A_WeaponReady(WRF_ALLOWUSER4);
			loop;
		Deselect: 
			PGUN A 1  
			{
				A_Lower(12);
			}
			loop;
		Select: 
			PGUN A 1
			{
				A_Raise(12);
			}
			loop;
		Fire:
			PGUN A 0
			{
				A_CheckIPState1();
				A_ConfirmIPAttack(361,0,6,8);
			}
			PGUN A 0 A_Jump (200,"FirePhase2");
			PGUN A 4
			{
				A_StartSound("POPFIRE");
				A_FireProjectile("Popcorn1",-1,false,4,1,0,0);
				A_FireProjectile("Popcorn2",0,false,6,1,0,0);
				
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("PopcornPiece",1);
			}
			PGUN B 2 
			{
				A_FireProjectile("Popcorn3",1,0,5,1,0,0);
			}
		FirePhase2:
			PGUN A 0 A_Jump (144,"FirePhase3");
			PGUN A 2
			{
				A_StartSound("POPFIRE");
				A_FireProjectile("Popcorn11",-1,0,4,2,0,0);
				A_FireProjectile("Popcorn2",-4,false,5,1,0,0);
				A_FireProjectile("Popcorn1",2,0,4,1,0,0);
				
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("PopcornPiece",1);
			}
		FirePhase3:
			PGUN A 0 A_Jump (128,"FirePhase4");
			PGUN A 4 
			{
				A_StartSound("POPFIRE");
				A_FireProjectile("Popcorn3",-2,0,3,1,0,0);
			}
			PGUN B 2 
			{
				A_FireProjectile("Popcorn2",-2,false,4,-2,0,0);
				A_FireProjectile("Popcorn2",4,0,0,1,0,0);
				
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("PopcornPiece",1);
			}
		FirePhase4:
			PGUN A 0 A_Jump (96,"FirePhase5");
			PGUN A 0 
			{
				A_StartSound("POPFIRE");
				A_FireProjectile("Popcorn2",-3,0,4,1,0,0);
				A_FireProjectile("Popcorn3",3,0,0,1,0,0);
			}
		FirePhase5:
			PGUN A 0 A_Jump (96,"FirePhase6");
			PGUN A 2 
			{
				A_FireProjectile("Popcorn1",3,0,5,1,0,0);
			}
			PGUN B 1 
			{
				A_StartSound("POPFIRE");
				A_FireProjectile("Popcorn2",0,0,0,1,0,0);
				A_FireProjectile("Popcorn3",-2,false,0,1,0,0);
				
				if (!A_CheckInfiniteAmmo()) A_TakeInventory("PopcornPiece",1);
			}
		FirePhase6:
			PGUN A 0 A_Jump (64,"FirePhase7");
			PGUN A 4 
			{
				A_StartSound("POPFIRE");
				A_FireProjectile("Popcorn3",-1,0,4,1,0,0);
			}
			PGUN A 2 
			{
				A_FireProjectile("Popcorn2",1,0,4,1,0,0);
			}
		FirePhase7:
			PGUN A 0 A_Jump (64,"FirePhase8");
			PGUN B 1
			{
				A_FireProjectile("BurntPopcorn1",0,0,5,1,0,0);
			}
		FirePhase8:
			PGUN A 0 A_Jump (128,"FirePhaseEnd");
			PGUN A 1
			{
				A_FireProjectile("BurntPopcorn1",0,0,5,1,0,0);
			}
		FirePhaseEnd:
			PGUN A 0
			{
				invoker.A_CheckIPModeOnUse();
			}
			Goto Ready;
	}
}