class RapidFireTrooper : EECreature
{
	default
	{
		//$Angled
		//$Color 12
		//$Category "Strange Aeons Monsters"
		Tag "Rapid Assault Zombieman";

		Health 30;
		Radius 20;
		Height 56;
		Speed 8;
		Mass 40;
		PainChance 200;
		DamageFactor "Fire", 2.0;
		Painchance "Fire", 256;
		DamageFactor "Ice", 1.34;
		Painchance "Ice", 256;
		DamageFactor "CherryBomb", 1.5;
		Painchance "CherryBomb", 256;
		DamageFactor "Chop", 1.25;
		Painchance "Chop", 250;
		Painchance "Fist", 256; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		MONSTER;
		+FLOORCLIP;
		DropItem "Clip";
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o was cut down by a maniac with a machinegun.";
		Decal "BulletChip";
	}
	
	void A_PosAttack()
	{
		if (target)
		{
			A_FaceTarget();
			double ang = angle;
			double slope = AimLineAttack(ang, MISSILERANGE);
			ang += Random2[PosAttack]() * (user_shotaccuracy/256);
			slope += Random2[PosAttack]() * (user_shotzaccuracy/256);
			A_StartSound("grunt/attack", CHAN_WEAPON);
			int damage = A_CalcDamageFormula(3,random(1,5),0.005,0.3334,0.1667,0.005);
			if (exex_bulletstracers == 0)
			{
				LineAttack(ang, MISSILERANGE, slope, damage, "Hitscan", "Bulletpuff");
			}
			else
			{
				actor TraceShot;
				TraceShot = A_SpawnProjectile("ZombieBulletTracer", 32, 0, ang, CMF_ABSOLUTEPITCH|CMF_ABSOLUTEANGLE, slope);
				if (TraceShot) 
				{
					EEBulletTracer TraceShotEE;
					TraceShotEE = EEBulletTracer(TraceShot);
					if (TraceShotEE) TraceShotEE.finaldamagedealt = damage;
				}
			}
		}
	}
	
	States 
	{ 
		Spawn: 
			RFTR A 0 NoDelay;
			RFTR AB 10 A_Look(); 
			loop;

		See: 
			RFTR A 0
			{
				user_shotsfired = 0;
			}
			RFTR AABBCCDD 3 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { bAVOIDMELEE = true; }
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(2); }
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			Loop;

		Missile: 
			RFTR E 10
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 100) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 60) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(8); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 20) { A_SetTics(9); }
				
				A_FaceTarget();
				user_shotsfired = 0;
				user_shotaccuracy = 22.5;
				user_shotzaccuracy = 0.0;
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 120) { A_SetTics(7); user_shotaccuracy = user_shotaccuracy * 6 / 9; user_shotzaccuracy = user_shotzaccuracy * 6 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 80) { A_SetTics(8); user_shotaccuracy = user_shotaccuracy * 7 / 9; user_shotzaccuracy = user_shotzaccuracy * 7 / 9; }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 40) { A_SetTics(9); user_shotaccuracy = user_shotaccuracy * 8 / 9; user_shotzaccuracy = user_shotzaccuracy * 8 / 9; }
				user_shotaccuracy1 = user_shotaccuracy * -0.5;
				user_shotaccuracy2 = user_shotaccuracy * 0.5;
				user_shotzaccuracy1 = user_shotzaccuracy * -0.5;
				user_shotzaccuracy2 = user_shotzaccuracy * 0.5;
			}
			RFTR F 5 Bright
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
				
				A_PosAttack();
			}
			RFTR E 5 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 180) { A_SetTics(3); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(4); }
			}
			TNT1 A 0 A_CheckIfTargetDead("See");
			TNT1 A 0 A_MonsterRefire(40,"See");
			Goto Missile+1;

		Pain: 
			RFTR G 3;
			RFTR G 3 A_EEPain();
			Goto See;

		Death:
			RFTR H 5;
			RFTR I 5 A_Scream();
			RFTR J 5 A_Fall();
			RFTR K 5;
			RFTR L -1;
			Stop;

		XDeath:
			RFTR M 5;
			RFTR N 5 A_XScream();
			RFTR N 5;
			RFTR P 5 A_Fall();
			RFTR QRS 5;
			RFTR T 5;
			RFTR U -1;
			Stop;

		Raise: 
			RFTR K 5;
			RFTR JIH 5;
			Goto See;

		Ice:
			RFTR G 5 A_GenericFreezeDeath();
			RFTR G 1 A_FreezeDeathChunks();
			wait;
	} 
}

class NightmareNew : EECreature
{
	default
	{
		Tag "Nightmare";
		//$Angled
		//$Color 12
		//$Category "Strange Aeons Monsters"
		Health 100;
		Radius 20;
		Height 56;
		Speed 15;
		PainChance 144;
		Painchance "Fist", 216; // Fist attacks have a +50% chance of stunning an enemy
		Painchance "Kick", 256; // Kick attacks have a +150% chance of stunning an enemy
		Painchance "Suck", 256;
		DamageFactor "Eldritch", 0.4;
		DamageFactor "Suck", 2.5;
		DamageFactor "Fist", 1.67;
		DamageFactor "Kick", 1.67;
		MONSTER;
		+FLOORCLIP;
		+STEALTH;
		+THRUSPECIES;
		+NOFEAR;
		+NOTARGET;
		+DONTTHRUST;
		+GHOST;
		+DONTBLAST;
		+NOINFIGHTSPECIES;
		Species "Nightmare";
		RenderStyle "Add";
		Alpha 0.01;
		SeeSound "nightmare/sight";
		PainSound "nightmare/pain";
		DeathSound "nightmare/death";
		ActiveSound "nightmare/active";
		MeleeSound "nightmare/melee";
		HitObituary "%o was tormented by a nightmare.";
		MeleeDamage 4;
	}
	
	States
	{
		Spawn:
			NMRE A 0 NoDelay A_NightmarePhaseOut();
			NMRE AABB 5 A_Look();
			Loop;

		See:
			NMRE AABBCCDD 3
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(2); }
				A_NightmarePhaseOut();
				A_EEChase("Melee","Missile",0,1,3,1,1);
			}
			NMRE D 0 
			{
				if (random(1,256) <= 32) 
				{
					A_DynamicMusic(matktype:11);
					A_SpawnProjectile("NightmareWisp",0,0,0); 
				}
			}
			Loop;

		Melee:
			TNT1 A 0 
			{
				A_DynamicMusic();
				A_NightmarePhaseIn();
			}
			NMRE EF 9 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(8); }
				A_NightmarePhaseIn();
				A_FaceTarget();
			}
			NMRE G 9 
			{
				if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 90) { A_SetTics(5); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(67,68)) { A_SetTics(6); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > 45) { A_SetTics(7); }
				else if (exex_monsterlevelenabledflags && CountInv("MonsterLevel") > random(22,23)) { A_SetTics(8); }
				A_NightmarePhaseIn();
				A_FaceTarget();
				
				A_CustomMeleeAttack(4*random(1,8),"nightmare/melee");
			}
			Goto See;
		
		Pain:
			NMRE H 2 
			{
				A_NightmarePhaseIn();
			}
			NMRE H 10 
			{
				A_NightmarePhaseIn();
				A_EEPain();
			}
			Goto See;
		Pain.Suck:
			NMRE H 2 
			{
				A_NightmarePhaseIn();
			}
			NMRE H 10 
			{
				A_NightmarePhaseIn();
				A_EEPain();
			}
			NMRE HHH 2;
			Goto See;

		Death:
			NMRE I 3 A_ScreamAndUnblock();
			NMRE JKLMNO 3;
			Stop;
			
		Ice:
			NMRE H 5 A_GenericFreezeDeath();
			NMRE H 1 A_FreezeDeathChunks();
			wait;
	}
}
